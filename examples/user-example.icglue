#!/usr/bin/env icglue

# tcl-script with icglue commands-extensions
# set syntax tcl !! (or icglueconstruct)

# Generate hierarchie in unit submodule
M -unit "component" -tree {
    tb_component .................. (tb,v)
    \- component_wrap ............. (rtl)
       \- component_top ........... (rtl)
          |
          +- anothersubmod_wrap ... (rtl,unit=anothersubmod)
          |  \- anothersubmod ..... (beh,attribute={cell=>true})
          |
          \- submod_wrap .......... (inc)
}

M -unit "submod" -tree {
    submod_wrap ........ (rtl)
    |
    +- common_reset_combiner<ref_core> ............. (res)
    +- common_sync<submod0..4> ..................... (res)
    +- common_sync<submod_trigger_sync> ............ (res)
    |
    +- submod_regfile .............................. (rf,rfattr=pad_to=0x100)
    \- submod_top .................................. (rtl)
       |
       +- submod ................................... (res)
       \- nocif .................................... (res)
}


########################################################################
### Simple exmaples of creating params, wires and inline code        ###
########################################################################

# parameters (parameter name is new tcl variable
#   with the specified value - might be useful for regfile which are not
#   able to deal with parameters, due to byte-sel logic)
P RF_ADDR_SEL = 4'b0110 tb_component component_wrap

# simple connections
S "rf_address" -w 32 tb_component  -->  component_wrap

# in- and output ports of resources can be pinned to any string (= is optional, default is {}):
S "syn_reset"            submod_wrap -->
S "comb_reset_ref_core" -pin = {syn_reset!} <--  common_reset_combiner<ref_core>:syn_reset_n_o
S "scan_mode"           -pin = 1'b0         -->  common_reset_combiner<ref_core>:testmode_i


# code placed in component_wrap (signal will be adapted, variable substition will be done as well,
# so don't forget to escape!)
# - use -noadapt to disable adaption
# - use -nosubst to disable variable substitution
# - use -verbatim as alias of both (-noadapt -nosubst)
set rf_addr_range 5
C component_wrap -as {
    assign rf_addr![31  : ${rf_addr_range}] = 'h0;
    assign rf_addr![ 0 +: ${rf_addr_range}] = rf_address![ 0 :+ ${rf_addr_range}];
    assign rf_sel! = (rf_addr![31:28] == RF_ADDR_SEL) ? 1'b1 : 1'b0;

    // debugging:
    always @(posedge apb_clk_i) begin
        if (rf_sel! && rf_enable!) begin
            \$display ("Regfile access at address 0x%08x(%d)", rf_addr!, \$time);
        end
    end
}
 

########################################################################
### tcl proc example for connect by name                             ###
########################################################################
# scripted connections of clock and reset by name
# - clk_resetn_mods(<typename> stores <instance-name> <clock-port> <resetn-port>
# - clk_mods(<typename>)       stores <instance-name>[:<port>]
# - resetn_mods(<typename>)    stores <instance-name>[:<port>]
proc create_clocking_and_resets {srcmod} {
    variable clk_resetn_mods
    variable clk_mods
    variable resetn_mods
    # iteration of all definied types
    foreach type [array names clk_resetn_mods] {
        # write values of the clk_resetn_mod to the clk_mods and resetn_mods
        foreach {mod p_clk p_rstn} [set clk_resetn_mods($type)] {
            lappend clk_mods($type)    ${mod}:${p_clk}
            lappend resetn_mods($type) ${mod}:${p_rstn}
        }
        # actual signal creation
        S "clk_${type}"     $srcmod  -->  [set clk_mods($type)]
        S "reset_${type}_n" $srcmod  -->  [set resetn_mods($type)]
    }
}


########################################################################
### CLOCKING and RESET                                               ###
########################################################################

variable clk_resetn_mods
variable clk_mods
variable resetn_mods
# see above for the variable names
### REF-clock/reset ###
set clk_resetn_mods(ref) {
    submod_regfile apb_clk_i apb_resetn_i
}
# special cases can go in those variables
# set single & create single clock lists
set resetn_mods(ref) {
    common_reset_combiner<ref_core>:sec_reset_n_i
}

### CORE-clock/reset ###
set clk_resetn_mods(core) {
    common_sync<submod0..4,submod_trigger_sync> clk_i resetn_i
    common_reset_combiner<ref_core>             clk_i prim_reset_n_i
}

# call the conneting proc
create_clocking_and_resets "tb_component"


########################################################################
### Regfile connection and creation                                  ###
########################################################################
# type field depends on your regfile template
# supported types of the default template are:
#  - RS:     synchronized read (common_sync)
#  - CR/CRW: custom read/write

# two equal ways of regfile connection and creation
if {0} {
    # explicit way (component view)
    S "entry_name0_s_cfg"    -w 5  submod:s_cfg_i     <--  submod_regfile
    S "entry_name0_s_status" -w 16 submod:s_status_o  -->  submod_regfile
    R submod_regfile "entry_name0" -protected {
        "name"   | "entrybits" | "type" | "reset" | "signal"             | "comment"
        -----    | ----------- | -----  | ------- | --------             | ---------
        s_cfg    | 4:0         | RW     | 5'h0    | entry_name0_s_cfg    | "Configure component"
        s_status | 31:16       | R      | 16'h0   | entry_name0_s_status | "Component status"
    }
} else {
    # inline connection (toplevel integration view)
    # uncomment the following command to see generated signals while execution
    #logger -level I -id RCon
    R submod_regfile "entry_name0" {
        "name"   | "entrybits" | "type" | "reset" | "signal"          | "comment"
        -----    | ----------- | -----  | ------- | --------          | ---------
        s_cfg    | 4:0         | RW     | 5'h0    | submod:s_cfg_i    | "Configure component"
        s_status | 31:16       | R      | 16'h0   | submod:s_status_o | "Component status"
    }
}

#  if the signal-width exceeds the the regfile data width you can split signals with the *signalbits* column
#  this is also useful for part selection and register subfield creation
S "s_cfg_large" -w 40 submod_regfile  -->  submod
S "s_cfg_trig"        submod_regfile  -->  submod
R submod_regfile "entry_name1_low" {
    "name" | "entrybits" | "type" | "reset" | "signal"    | "signalbits" | "comment"
    -----  | ----------- | -----  | ------- | --------    | ------------ | ---------
    s_cfg  | 31:0        | RW     | 32'h0   | s_cfg_large | 31:0         | "Configure submod part 0"
}
R submod_regfile "entry_name1_high" -align 8 {
    "name"         | "entrybits" | "type" | "reset" | "signal"    | "signalbits" | "comment"
    -------------- | ----------- | -----  | ------- | --------    | ------------ | ---------
    s_cfg          | 7:0         | RW     | 8'h0    | s_cfg_large | 39:32        | "Configure submod part 1"
    s_cfg_trigger  |   8         | RWT    | 1'b0    | s_cfg_trig  | -            | "trigger config update"
}

# explicitly assign register addresses with '@ ADDR'
S "s_ex_a" -w 8 submod_regfile --> submod
R submod_regfile "ex_addressed_reg" @ 0x0030 {
    "name" | "entrybits" | "type" | "reset" | "signal"    | "signalbits" | "comment"
    -----  | ----------- | -----  | ------- | --------    | ------------ | ---------
    s_ex_a | 7:0         | RW     | 8'h0    | s_ex_a      | 39:32        | "Configure submod part 1"
}


# regfile creation of a single entry + connection (for the lazy people, type can be specified, otherwise R/RW derived from the direction of the connection
# uncomment the following command to see the S/R command issued
#logger -level I -id SRCmd
SR "submod_start_seed" -w 32 = 32'hCAFEBABE submod_regfile  -->  submod:start_seed_i \
                                                                 -comment "Submodule start seed"


# -handshake flag allows synchronisation (if supported by template)
# works for the normal R command with and with-out inline connection as well
if {1} {

    S  "state_trigger"            submod_regfile                           -->  common_sync<submod_trigger_sync>:data_i
    S  "state_trigger_sync"       common_sync<submod_trigger_sync>:data_o  -->  submod:trigger_i
    S  "state_trigger_ack"        submod_regfile                           <--  submod:trigger_ack_o
    # handshake arguments are <trigger-signal> <trigger-ack-signal> [<type>]
    # type = "S" means sync trigger-ack-signal via common sync
    SR "submod_state"       -w 32 submod_regfile                           <--  submod:state_o \
                                                                                -handshake {"state_trigger" "state_trigger_ack" "S"} \
                                                                                -protected \
                                                                                -comment "Submodule read state"

} else {

    # same as above but with inline handshake connections
    # see `logger -level I -id SRCmd`  and `logger -level I -id RCon` for the generate commands
    SR "submod_state"       -w 32 submod_regfile                           <--  submod:state_o \
                                                                                -handshake { {"state_trigger" common_sync<submod_trigger_sync>:data_i}
                                                                                {"state_trigger_ack" submod:trigger_ack_o } "S"} \
                                                                                -comment "Submodule read state"
    S  "state_trigger_sync"       common_sync<submod_trigger_sync>:data_o  -->  submod:trigger_i

}

# control regfile protection via protected register
SR "rf_protect" -w 1 = 1'b0 submod_regfile:rf_protect_ctl! --> submod_regfile:apb_prot_en! -comment "protection enable"

# a more scripting advanced example for:
#   connecting control signals from regfile to submodule through common_syncs

# rf_submod_con_list -> connection list with <signalname> <submod-port> <comment>
set rf_submod_con_list {
    start            start_i    "start's the module"
    enable_feature0  feature0_i "enables feature0"
    enable_feature1  feature1_i "enables feature1"
    enable_feature2  feature2_i "enables feature2"
    enable_feature3  feature3_i "enables feature3"
}

set i 0
#rf_submod_table as list of lists
set rf_submod_table {}
lappend rf_submod_table [list "name"  "width" "type" "reset" "signal" "comment"]
foreach {name submodport comment} $rf_submod_con_list {
    # connect to sync's
    S "submod_${name}"      submod_regfile        -->  common_sync<submod${i}>:data_i
    S "submod_${name}_sync" submod:${submodport}  <--  common_sync<submod${i}>:data_o
    lappend rf_submod_table [list "${name}" 1 RW 1'b0 "submod_${name}" "$comment"]
    incr i
}

R submod_regfile "entry_sync0"  $rf_submod_table

########################################################################
### Connect fixed ports of the apb regfile template                  ###
########################################################################
set rf_apb_ports {
        rf_addr    --> apb_addr       32 component_wrap
        rf_sel     --> apb_sel        1  component_wrap
        rf_enable  --> apb_enable     1
        rf_write   --> apb_write      1
        rf_strb    --> apb_strb       4
        rf_prot    --> apb_prot       3
        rf_wdata   --> apb_wdata      32

        rf_ready   <-- apb_ready      1
        rf_rdata   <-- apb_rdata      32
        rf_slverr  <-- apb_slverr     1
}

foreach rf_conn [split $rf_apb_ports "\n"] {
    lassign $rf_conn sig <-> p w mod
    if {$rf_conn eq ""} {continue}
    if {$mod eq ""} {
        set mod tb_component
    }

    S "$sig" -w $w $mod ${<->} submod_regfile:${p}!
}


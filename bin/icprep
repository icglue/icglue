#!/usr/bin/env tclsh

#
#   ICGlue is a Tcl-Library for scripted HDL generation
#   Copyright (C) 2017-2019  Andreas Dixius, Felix Neum√§rker
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# try to set package path and load ICGlue package for typical cases
set binpath $::argv0
set igroot [file dirname [file dirname [file normalize $binpath]]]
lappend auto_path "[file join $igroot lib]"

set icglue_silent_load "true"
package require Tcl 8.6
package require ICGlue 4.0


proc gen_all {target userdata dryrun} {
    foreach {flag description default_value check} [ig::templates::current::template_args] {
        if {![dict exists $userdata $flag]} {
            dict set userdata $flag $default_value
        }
        set value [dict get $userdata $flag]
        if {$check ne ""} {
            ##nagelfar ignore Expr without braces
            while {![expr $check]} {
                if {$value ne ""} {
                    puts "Invalid value \"$value\" for $description."
                }
                puts -nonewline "Enter value for $description: "
                flush stdout
                set value [gets stdin]
                dict set userdata $flag $value
            }
        }
    }

    set template_data {}
    foreach {key value} $userdata {
        lappend template_data [string trimleft $key "-"] $value
    }

    foreach {tag lang ttfile outfile} [ig::templates::current::get_template_data $userdata] {
        lassign [ig::templates::adapt_output_path $outfile] outfile outf_name_var

        ig::templates::log_generate $outf_name_var $tag $dryrun

        set note "${target}/${tag}"
        ig::templates::generate_template_output $outfile $ttfile $lang $template_data $note $dryrun
    }
}


proc printhelp {{exitcode 0} {channel stdout} {doexit "true"}} {
    puts $channel [format \
{Usage: %s [OPTION]... <template> [TEMPLATE OPTIONS]

Options:
Mandatory arguments to long options are mandatory for short options too.
    -h, --help               Show help

    --template-dir=DIR       Add DIR to template path
    -t, --show-templates     Show available templates

    -l, --logger=TAG         Enable output log of TAG (format: LEVEL,IDENTIFIER)

    -n, --dryrun             Do not modify/writeout results

    -q, --quiet              Show errors only
    -v, --verbose            Be verbose
    -d, --debug              Show debug output

    --nocopyright            Do not print the ICGlue copyright, version and logo upon start to stderr

    --version                Show version

} [file tail $::argv0]]

    if {$doexit} {
        exit $exitcode
    }
}

proc additionalversion {} {

    variable binpath
    set gitpath [file dirname $binpath]
    set results {}
    # additionalversion_str default is replaced by make install
    if {[set additionalversion_str "INSTALLED-VERSION"] ne "INSTALLED-VERSION"} {
        return $additionalversion_str
    }

    if {![catch {set results [exec -ignorestderr igit -C $gitpath ls-files [file tail $binpath]]}]} {
        if {[string trim $results] ne ""} {
            set gitrev [exec git -C $gitpath rev-parse --short HEAD]
            set gitdirty ""
            if {[exec git -C $gitpath diff --shortstat] ne ""} {
                set gitdirty "-dirty"
            }
            set additionalversion_str "git-rev ${gitrev}${gitdirty} \[live\]"
        }
    }
    return " ($additionalversion_str)"
}

proc get_version_str {} {
    set version_str [format  \
{ICGlue 4.0%s
Copyright (C) 2017-2019 Andreas Dixius, Felix Neumaerker

License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Andreas Dixius, Felix Neumaerker} [additionalversion]]
 return $version_str
}

proc printversion {} {
    puts [get_version_str]
    exit 0
}

proc try_get_unit {} {
    if {![info exists ::env(ICPRO_DIR)]} {
        return {false ""}
    }

    set unit_dir [file normalize "$::env(ICPRO_DIR)/units"]

    set work_dir [file normalize [pwd]]

    set ud_len [string length $unit_dir]

    if {[string range $work_dir 0 [expr $ud_len - 1]] ne $unit_dir} {
        return {false ""}
    }

    set unit [lindex [file split [string range $work_dir [expr $ud_len + 1] end]] 0]

    if {$unit eq ""} {
        return {false ""}
    }

    return [list true $unit]
}

proc main {} {
    variable binpath

    # flags
    set help            "false"
    set help_invalid    "false"
    set debugdebug      "false"
    set print_version   "false"
    set nologo          "false"
    set dryrun          "false"
    set show_templates  "false"

    # flags with mandatory arguments
    set c_loglevel      "W"
    set c_template_dirs {}
    set c_log           {}

    # arguments
    set args_rem [ig::aux::_parse_opts {} {} [list                   \
        {  {^(-h|--help)$}           "const=true"  help            {} } \
        {  {^(-help.*)$}             "const=true"  help_invalid    {} } \
        {  {^(-q|--quiet)$}          "const=E"     c_loglevel      {} } \
        {  {^(-v|--verbose)$}        "const=I"     c_loglevel      {} } \
        {  {^(-d|--debug)$}          "const=D"     c_loglevel      {} } \
        {  {^(-dd|--debugdebug)$}    "const=true"  debugdebug      {} } \
        {  {^(--version$)}           "const=true"  print_version   {} } \
        {  {^(-n|--dryrun)$}         "const=true"  dryrun          {} } \
                                                                      \
        {  {^(-t|--show-templates)$} "const=true"  show_templates  {} } \
        {  {^--template-dir(=|$)}    "list"        c_template_dirs {} } \
        {  {^(-l|--logger)(=|$)}     "list"        c_log           {} } \
        {  {^(--nocopyright)$}       "const=true"  nologo          {} } \
        {  {^(--nologo)$}            "const=true"  nologo          {} } \
        ] $::argv]

    if {$help && ([llength $args_rem] == 0)} {
        printhelp 0
    }
    if {!$nologo && !$help && !$show_templates} {
        ig::print_logo
    }
    if {$print_version} {
        printversion
    }

    if {$help_invalid || (!$show_templates && ([llength $args_rem] == 0))} {
        printhelp 1 stderr
        puts "no target"
        exit 1
    }

    ig::logger -level I -id Gen

    set c_loglines "false"
    if {$debugdebug} {
        set c_loglevel "D"
        set c_loglines "true"
    }
    if {[info exists ::env(ICGLUE_LINE_NUMBERS)]} {
        set c_loglines $::env(ICGLUE_LINE_NUMBERS)
    }

    if {$c_loglines} {
        ig::logger -level ${c_loglevel} -linenumber
    } else {
        ig::logger -level ${c_loglevel} -nolinenumber
    }

    if {[llength $c_log]} {
        foreach l $c_log {
            lassign [split $l ","] log_level log_id
            if {$log_level in {"D" "I" "W" "E"}} {
                ig::logger -level $log_level -id $log_id
                ig::log -info -id Log "Enable logging of $log_level,$log_id"
            } else {
                ig::log -error "Unknown loglevel $log_level ($log_level,$log_id)"
            }
        }
    }

    # environment
    # ... template path ($ICPREP_TEMPLATE_PATH)
    if {[info exists ::env(ICPREP_TEMPLATE_PATH)]} {
        foreach i_dir [split $::env(ICPREP_TEMPLATE_PATH) ":"] {
            lappend c_template_dirs $i_dir
        }
    }
    # ... template to use ($ICPREP_TEMPLATE)
    if {[info exists ::env(ICPREP_TEMPLATE)]} {
        set c_template $::env(ICPREP_TEMPLATE)
    }

    # templates provided with package
    lappend c_template_dirs [list "[file dirname [file normalize $binpath]]/../share/icprep/templates"]

    # template dirs
    foreach i_tdir $c_template_dirs {
        if {[file isdirectory $i_tdir]} {
            ig::templates::add_template_dir $i_tdir
        }
    }

    # just print templates?
    if {$show_templates} {
        puts "Available templates:"
        foreach t $ig::templates::collection::template_dir {
            puts "    - [lindex $t 0]"
        }
        puts "Run [file tail $::argv0] <template> --help to see template options."
        exit 0
    }

    # prepare target and data
    set prep_target [lindex $args_rem 0]
    set prep_data [dict create target $prep_target]
    lassign [try_get_unit] unit_name_found unit_name
    if {$unit_name_found} {
        dict set prep_data --unit $unit_name
    }
    foreach {i_key i_val} [lrange $args_rem 1 end] {
        dict set prep_data $i_key $i_val
    }

    if {[catch {ig::templates::load_template $prep_target}]} {
        ig::log -error "Failed to load template for target \"${prep_target}\""
        exit 1
    }

    if {$help} {
        puts "Usage: [file tail $::argv0] $prep_target\n\nOptions: \[OPTION\]"
        foreach {flag description default_value check} [ig::templates::current::template_args] {
            puts [format "  %-26s %s" $flag $description]
        }
        exit 0
    }
    gen_all $prep_target $prep_data $dryrun

    set exitcode 0

    set msg {}
    set loglevel_list {D I W E}
    foreach {stat_opt stat_fmt} {
        {}        "  %s: %6d messages generated."
        -suppress "  %s: %6d messages have been explicitly disabled."} {
        foreach level [lrange $loglevel_list [lsearch $loglevel_list $c_loglevel] end] {
            set log_count [ig::log_stat {*}$stat_opt -level $level]
            if {$log_count > 0} {
                lappend msg [format $stat_fmt $level $log_count]

                if {($stat_opt eq "")} {
                    if {($level eq "W") && ($exitcode == 0)} {
                        set exitcode 2
                    }
                    if {($level eq "E")} {
                        set exitcode 1
                    }
                }
            }
        }
    }

    if {[llength $msg]} {
        puts "\nSummary:\n[join $msg "\n"]"
    }
    exit $exitcode
}

main

# vim: set filetype=icgluetcl syntax=tcl:

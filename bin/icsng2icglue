#!/usr/bin/env tclsh

#
#   ICGlue is a Tcl-Library for scripted HDL generation
#   Copyright (C) 2017-2020  Andreas Dixius, Felix Neum√§rker
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# try to set package path and load ICGlue package for typical cases
set binpath $::argv0
set igroot [file dirname [file dirname [file normalize $binpath]]]
lappend auto_path "[file join $igroot lib]"

set icglue_silent_load "true"
package require Tcl 8.6
package require ICGlue 4.0

proc printhelp {{exitcode 0} {channel stdout} {doexit "true"}} {
    puts $channel [format \
{Usage: %s [OPTION]... ICSNG-FILE [ICGLUE-FILE]

Options:
Mandatory arguments to long options are mandatory for short options too.
    -h, --help               Show help

    -l, --logger=TAG         Enable output log of TAG (format: LEVEL,IDENTIFIER)

    -q, --quiet              Show errors only
    -v, --verbose            Be verbose
    -d, --debug              Show debug output
    --nocopyright            Do not print the ICGlue copyright, version and logo upon start to stderr

    --version                Show version

} [file tail $::argv0]]

    if {$doexit} {
        exit $exitcode
    }
}

proc additionalversion {} {

    variable binpath
    set results {}
    # additionalversion_str default is replaced by make install
    set additionalversion_str "INSTALLED-VERSION"
    if {$additionalversion_str ne "INSTALLED-VERSION"} {
        # do not add an additional version string if this is a tagged release
        if {"ICGlue 5.0a1" eq "ICGlue [string range $additionalversion_str 1 end]"} {
            return {}
        }
        return " ($additionalversion_str)"
    }

    # try to get git hash
    set gitpath [file dirname $binpath]
    if {![catch {set results [exec -ignorestderr git -C $gitpath ls-files [file tail $binpath] 2> /dev/null]}]} {
        if {[string trim $results] ne ""} {
            return " ([exec git -C $gitpath describe --tags --always --dirty])"
        }
    }
    return {}
}

proc printversion {} {
    puts [format \
{icsng2ICGlue 4.0%s
Copyright (C) 2017-2020 Andreas Dixius, Felix Neumaerker

License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Andreas Dixius, Felix Neumaerker} [additionalversion]]

    exit 0
}

proc main {} {
    # flags
    set help            "false"
    set help_invalid    "false"
    set debugdebug      "false"
    set print_version   "false"
    set nologo          "false"

    # flags with mandatory arguments
    set c_loglevel      "W"
    set c_loglines      "false"

    set c_template      "default"
    set c_template_dirs {}
    set c_file          ""
    set c_log           {}
    set c_scriptargs    {}

    # arguments
    set arguments [ig::aux::_parse_opts {} {} [list                       \
        {  {^(-h|--help)$}         "const=true" help            {} } \
        {  {^-help(doxy)?$}        "const=true" help_invalid    {} } \
        {  {^(-q|--quiet)$}        "const=E"    c_loglevel      {} } \
        {  {^(-v|--verbose)$}      "const=I"    c_loglevel      {} } \
        {  {^(-d|--debug)$}        "const=D"    c_loglevel      {} } \
        {  {^(-dd|--debugdebug)$}  "const=true" debugdebug      {} } \
        {  {^(--version$)}         "const=true" print_version   {} } \
                                                                     \
        {  {^(-l|--logger)(=|$)}   "list"       c_log           {} } \
        {  {^(--nocopyright)$}     "const=true" nologo          {} } \
        {  {^(--nologo)$}          "const=true" nologo          {} } \
        ] $::argv]

    if {$help} {
        printhelp 0
    }
    if {!$nologo} {
        ig::print_logo
    }
    if {$print_version} {
        printversion
    }

    set c_loglines "false"
    if {$debugdebug} {
        set c_loglevel "D"
        set c_loglines "true"
    }
    set c_infile [lindex $arguments 0]
    if {$c_infile eq ""} {
        printhelp 1
    }

    if {[set c_outfile [lindex $arguments 1]] eq ""} {
        # default outfile
        set c_outfile "[file rootname $c_infile].icglue"
    }

    if {$c_loglines} {
        ig::logger -level ${c_loglevel} -linenumber
    } else {
        ig::logger -level ${c_loglevel} -nolinenumber
    }

    ig::logger -level I -id SNGCv

    if {[llength $c_log]} {
        foreach l $c_log {
            lassign [split $l ","] log_level log_id
            if {$log_level in {"D" "I" "W" "E"}} {
                ig::logger -level $log_level -id $log_id
                ig::log -info -id Log "Enable logging of $log_level,$log_id"
            } else {
                ig::log -error "Unknown loglevel $log_level ($log_level,$log_id)"
            }
        }
    }

    # create icglue-script
    if {[file isfile $c_infile]} {
        # TODO: check if already exists + force option?
        ig::sng::convert_file $c_infile $c_outfile
    }

    # insert icglue pragmas
    foreach i_module [ig::db::get_modules -all] {
        if {![ig::db::get_attribute -object $i_module -attribute "resource"]} {
            ig::log -info "generating module $i_module"
            set workingdir "."
            if {[info exists ::env(ICPRO_DIR)]} {
                set workingdir $::env(ICPRO_DIR)
            }
            ig::sng::update_file_pragmas $i_module $workingdir
        }
    }

    file attributes $c_outfile -permissions 0755
}

main

# vim: set filetype=icgluetcl syntax=tcl:

#!/usr/bin/env tclsh

#
#   ICGlue is a Tcl-Library for scripted HDL generation
#   Copyright (C) 2017-2019  Andreas Dixius, Felix Neum√§rker
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# try to set package path and load ICGlue package for typical cases
set binpath $::argv0
set igroot [file dirname [file dirname [file normalize $binpath]]]
lappend auto_path "[file join $igroot lib]"

set icglue_silent_load "true"
package require Tcl 8.6
package require ICGlue 3.4

proc printhelp {{exitcode 0} {channel stdout} {doexit "true"}} {
    puts $channel [format \
{Usage: %s [OPTION]... FILE

Options:
Mandatory arguments to long options are mandatory for short options too.
    -h, --help               Show help
    -g, --gui                Show GUI

    -f, --file=FILE          DEPRECATED: set input FILE to use (FILE argument is omitted)
    -t, --template=FILE      Set FILE to use as template
    --template-dir=DIR       Add DIR to template path
    -o, --outtypes=LIST      Comma-separated list of output types to generate (or empty for everything).

    -l, --logger=TAG         Enable output log of TAG (format: LEVEL,IDENTIFIER)

    -a, --args=K[=V]         Set K to V before running icglue construction script

    -n, --dryrun             Do not modify/writeout results, just run script and checks

    -q, --quiet              Show errors only
    -v, --verbose            Be verbose
    -d, --debug              Show debug output
    --nocopyright            Do not print the ICGlue copyright, version and logo upon start to stderr
    --nocolor                Do not use colorcodes in logger

    --version                Show version

If the FILE has the extention .sng or .icng, it will try to parse the input as icsng syntax and translate them to corresponding icglue commands.
Otherwise the FILE is interpreted as TCL-Script which supports the icglue extension for hardware description.
} [file tail $::argv0]]

    if {$doexit} {
        exit $exitcode
    }
}

proc additionalversion {} {

    variable binpath
    set gitpath [file dirname $binpath]
    set results {}
    # additionalversion_str default is replaced by make install
    if {[set additionalversion_str "INSTALLED-VERSION"] ne "INSTALLED-VERSION"} {
        return $additionalversion_str
    }

    if {![catch {set results [exec -ignorestderr igit -C $gitpath ls-files [file tail $binpath]]}]} {
        if {[string trim $results] ne ""} {
            set gitrev [exec git -C $gitpath rev-parse --short HEAD]
            set gitdirty ""
            if {[exec git -C $gitpath diff --shortstat] ne ""} {
                set gitdirty "-dirty"
            }
            set additionalversion_str "git-rev ${gitrev}${gitdirty} \[live\]"
        }
    }
    return " ($additionalversion_str)"
}

proc get_version_str {} {
    set version_str [format  \
{ICGlue 3.4%s
Copyright (C) 2017-2019 Andreas Dixius, Felix Neumaerker

License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Andreas Dixius, Felix Neumaerker} [additionalversion]]
 return $version_str
}

proc printversion {} {
    puts [get_version_str]
    exit 0
}


proc generate {c_file c_outtypelist c_loglevel scriptargs dryrun} {

    global g_generate_progress
    set g_generate_progress 0

    # construct hierarchy from input file
    if {[regexp "\.(ic)?sng$" $c_file]} {
        # teat (ic)sng files seperately (sng syntax)
        ig::sng::evaluate_file $c_file
    } else {
        ig::construct::run_script $c_file $scriptargs
    }

    # generate output
    set outtypelist [split $c_outtypelist ","]

    set gen_modules   [ig::db::get_modules -all]
    set num_modules   [llength $gen_modules]
    set gen_regfiles  [ig::db::get_regfiles -all]
    set num_regfiles  [llength $gen_regfiles]
    set num_items     [expr $num_modules + $num_regfiles]
    set progress_step [expr 100.0 / $num_items]

    # generate modules with template
    foreach i_module $gen_modules {
        if {[ig::db::get_attribute -object $i_module -attribute "dummy" -default "false"]} {
            continue
        }
        ig::checks::check_object $i_module
        if {![ig::db::get_attribute -object $i_module -attribute "resource"]} {
            ig::log -info "generating module $i_module"
            ig::templates::write_object_all $i_module $outtypelist $dryrun
        }
        # update progress and enter GUI event loop
        set g_generate_progress [expr $g_generate_progress + $progress_step]
        update
    }
    # generate regfiles with template
    foreach i_regfile $gen_regfiles {
        ig::checks::check_object $i_regfile
        ig::log -info "generating regfiledoc $i_regfile"
        ig::templates::write_object_all $i_regfile $outtypelist $dryrun
        # update progress and enter GUI event loop
        set g_generate_progress [expr $g_generate_progress + $progress_step]
        update
    }

    set exitcode 0

    set msg {}
    set loglevel_list {D I W E}
    foreach {stat_opt stat_fmt} {
        {}        "  %s: %6d messages generated."
        -suppress "  %s: %6d messages have been explicitly disabled."} {
        foreach level [lrange $loglevel_list [lsearch $loglevel_list $c_loglevel] end] {
            set log_count [ig::log_stat {*}$stat_opt -level $level]
            if {$log_count > 0} {
                lappend msg [format $stat_fmt $level $log_count]

                if {($stat_opt eq "")} {
                    if {($level eq "W") && ($exitcode == 0)} {
                        set exitcode 2
                    }
                    if {($level eq "E")} {
                        set exitcode 1
                    }
                }
            }
        }
    }

    if {[llength $msg]} {
        puts "\nSummary:\n[join $msg "\n"]"
    }
    return $exitcode
}

proc show_gui_help {} {
    tk_messageBox -message "ICGlue GUI Help" -detail [format {Keybindings:
Quit: q or Ctrl-q or Ctrl-w
Generate: g
Help: h
}] -parent .
}


proc show_gui {c_file c_outtypelist c_loglevel scriptargs dryrun} {
    variable tk_library
    variable igroot
    set img_name "pwrdLogo200.gif"
    set tcl_logo    [image create photo -file [file join $tk_library images $img_name]]
    set icglue_logo [image create photo -file [file join ${igroot} share icglue icons logo.png]]

    # widgets
    label .tcl_logo_label -image $tcl_logo
    label .icglue_logo_label -image $icglue_logo
    label .title_text -text [get_version_str]
    label .file_text  -text $c_file
    button .run -text Generate -command [list generate $c_file $c_outtypelist $c_loglevel $scriptargs $dryrun]
    button .exit -text Exit -command exit
    button .help -text Help -command show_gui_help
    ttk::progressbar .pbar -orient horizontal -length 400 -mode determinate -variable g_generate_progress

    # placement
    grid .file_text         -row 0 -columnspan 3
    grid .icglue_logo_label -row 1 -columnspan 3
    grid .title_text        -row 2 -columnspan 3
    #grid .tcl_logo_label    -row 0 -column 1
    grid .run               -row 3 -column 0
    grid .exit              -row 3 -column 1
    grid .help              -row 3 -column 2
    grid .pbar              -row 4 -columnspan 3
    wm title . "ICGlue"
    bind . <q> { exit }
    bind . <Control-Key-q> { exit }
    bind . <Control-Key-w> { exit }
    bind . <g> { generate }
    bind . <h> { show_gui_help }
    bell
}

proc main {} {
    variable binpath

    # flags
    set help            "false"
    set help_invalid    "false"
    set debugdebug      "false"
    set print_version   "false"
    set nologo          "false"
    set nocolor         "false"
    set dryrun          "false"
    set gui             "false"

    # flags with mandatory arguments
    set c_loglevel      "W"
    set c_template      "default"
    set c_template_dirs {}
    set c_file          ""
    set c_log           {}
    set c_scriptargs    {}
    set c_outtypelist   {}

    # arguments
    set filename [ig::aux::_parse_opts {} {} [list                   \
        {  {^(-h|--help)$}         "const=true" help            {} } \
        {  {^(-g|--gui)$}          "const=true" gui             {} } \
        {  {^-help(doxy)?$}        "const=true" help_invalid    {} } \
        {  {^(-q|--quiet)$}        "const=E"    c_loglevel      {} } \
        {  {^(-v|--verbose)$}      "const=I"    c_loglevel      {} } \
        {  {^(-d|--debug)$}        "const=D"    c_loglevel      {} } \
        {  {^(-dd|--debugdebug)$}  "const=true" debugdebug      {} } \
        {  {^(--version$)}         "const=true" print_version   {} } \
        {  {^(-n|--dryrun)$}       "const=true" dryrun          {} } \
                                                                     \
        {  {^--template-dir(=|$)}  "list"       c_template_dirs {} } \
        {  {^(-t|--template)(=|$)} "string"     c_template      {} } \
        {  {^(-o|--outtypes)(=|$)} "string"     c_outtypelist   {} } \
        {  {^(-f|--file)(=|$)}     "list"       c_file          {} } \
        {  {^(-l|--logger)(=|$)}   "list"       c_log           {} } \
        {  {^(-a|--args)(=|$)}     "list"       c_scriptargs    {} } \
        {  {^(--nocopyright)$}     "const=true" nologo          {} } \
        {  {^(--nocolor)$}         "const=true" nocolor         {} } \
        {  {^(--nologo)$}          "const=true" nologo          {} } \
        ] $::argv]

    if {$help} {
        printhelp 0
    }
    if {!$nologo} {
        ig::print_logo
    }
    if {$print_version} {
        printversion
    }

    set c_file [concat $c_file $filename]
    if {$help_invalid || ([llength $c_file] == 0)} {
        printhelp 1 stderr
    }

    if {$nocolor} {
        ig::logger -nocolor
    }

    ig::logger -level I -id Gen

    set c_loglines "false"
    if {$debugdebug} {
        set c_loglevel "D"
        set c_loglines "true"
    }
    if {[info exists ::env(ICGLUE_LINE_NUMBERS)]} {
        set c_loglines $::env(ICGLUE_LINE_NUMBERS)
    }

    if {$c_loglines} {
        ig::logger -level ${c_loglevel} -linenumber
    } else {
        ig::logger -level ${c_loglevel} -nolinenumber
    }

    if {[llength $c_log]} {
        foreach l $c_log {
            lassign [split $l ","] log_level log_id
            if {$log_level in {"D" "I" "W" "E"}} {
                ig::logger -level $log_level -id $log_id
                ig::log -info -id Log "Enable logging of $log_level,$log_id"
            } else {
                ig::log -error "Unknown loglevel $log_level ($log_level,$log_id)"
            }
        }
    }

    # environment
    # ... template path ($ICGLUE_TEMPLATE_PATH)
    if {[info exists ::env(ICGLUE_TEMPLATE_PATH)]} {
        foreach i_dir [split $::env(ICGLUE_TEMPLATE_PATH) ":"] {
            lappend c_template_dirs $i_dir
        }
    }
    # ... template to use ($ICGLUE_TEMPLATE)
    if {[info exists ::env(ICGLUE_TEMPLATE)]} {
        set c_template $::env(ICGLUE_TEMPLATE)
    }

    # templates provided with package
    lappend c_template_dirs [list "[file dirname [file normalize $binpath]]/../share/icglue/templates"]

    # argument evaluation
    if {![file isfile $c_file]} {
        if {[regexp {^-} $c_file]} {
            puts stderr [format {%s: unrecognized option '%s'} [file tail $::argv0] ${c_file}]
        } else {
            puts stderr [format {%s: cant read file '%s'} [file tail $::argv0] ${c_file}]
        }
        exit 1
    }

    # script args
    set scriptargs {}
    foreach s_arg $c_scriptargs {
        foreach arg [split $s_arg ","] {
            set arg_spl [split $arg "="]
            if {[llength $arg_spl] > 1} {
                set k [lindex $arg_spl 0]
                set v [join [lrange $arg_spl 1 end] "="]
                lappend scriptargs [list $k $v]
            } elseif {[llength $arg_spl] == 1} {
                # true
                lappend scriptargs [list $arg 1]
            }
        }
    }

    # template dirs
    foreach i_tdir $c_template_dirs {
        if {[file isdirectory $i_tdir]} {
            ig::templates::add_template_dir $i_tdir
        }
    }

    if {[catch {ig::templates::load_template $c_template}]} {
        ig::log -error "Failed to load template \"${c_template}\""
        exit 1
    }

    if {$gui} {
        # save argv (Tk parses args as well -- -g collidates)
        set ::orig_argv $::argv
        set ::argv {}
        package require Tk
        show_gui $c_file $c_outtypelist $c_loglevel $scriptargs $dryrun
    } else {
        exit [generate $c_file $c_outtypelist $c_loglevel $scriptargs $dryrun]
    }
}

main

# vim: set filetype=icgluetcl syntax=tcl:

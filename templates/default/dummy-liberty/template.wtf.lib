%(
# template for dummy liberty files

array set mod_data [module_to_arraylist $obj_id]
set bus_type_index 0
set opcondition [ig::db::get_attribute -object $obj_id -attribute "opcondition"]
set indent "  "

%)
/* ICGLUE GENERATED FILE - manual changes out of prepared *icglue keep begin/end* blocks will be overwritten */
/* This is a dummy lib with bogus or no timing

 Manual edits required in these keep blocks:
   - library-header (voltage map, opconditions)
   - cell-header (area, pg pins)
*/

library ($mod_data(name)) {

  /* Start of header section */
  delay_model : table_lookup;
  date : "Sat Nov 05 07:23:00 1955" ;
  revision : "1.0" ;
  bus_naming_style : "%s\[%d\]" ;
  comment : "Generated By ICGlue";

% # filesuffix specifies comment start and end; .cpp instead of .lib (which ICGlue does not know about yet)
[pop_keep_block_content keep_block_data "keep" "library-header" ".cpp" "

  /* unit attributes */
  capacitive_load_unit ( 1.000000,ff);
  current_unit : \"1mA\" ;
  pulling_resistance_unit : \"1kohm\" ;
  time_unit : \"1ns\" ;
  voltage_unit : \"1V\" ;
  leakage_power_unit : \"1nW\" ;


  /* threshold definitions */
  input_threshold_pct_fall : 50.000000;
  input_threshold_pct_rise : 50.000000;
  output_threshold_pct_fall : 50.000000;
  output_threshold_pct_rise : 50.000000;
  slew_lower_threshold_pct_fall : 20.000000;
  slew_lower_threshold_pct_rise : 20.000000;
  slew_upper_threshold_pct_fall : 80.000000;
  slew_upper_threshold_pct_rise : 80.000000;
  slew_derate_from_library : 1.0000;

  /*
  voltage_map( VDD , 0.450000);
  voltage_map( VPW , -1.627000);
  voltage_map( VNW , 1.116000);
  voltage_map( VSS , 0.000000);
  */

  /* operating conditions */
  operating_conditions (${opcondition}){
      process :  1.000000;
      temperature :  125.000000;
      voltage :  0.550000;
      tree_type :  \"worst_case_tree\" ;
  }
  default_operating_conditions : \"${opcondition}\" ;
  nom_process : 1.000000;
  nom_temperature : 125.000000;
  nom_voltage : 0.550000;


  /* default attributes */
  default_fanout_load : 1.000000;
  default_inout_pin_cap : 1.000000;
  default_input_pin_cap : 1.000000;
  default_output_pin_cap : 1.000000;
  default_wire_load_area : 1.000000;
  default_wire_load_capacitance : 1.000000;
  default_wire_load_resistance : 1.000000;
  k_process_cell_rise :  0.000000;
  k_process_cell_fall :  0.000000;
  k_volt_cell_rise :  0.000000;
  k_volt_cell_fall :  0.000000;
  k_temp_cell_rise :  0.000000;
  k_temp_cell_fall :  0.000000;
  k_process_rise_transition :  0.000000;
  k_process_fall_transition :  0.000000;
  k_volt_rise_transition :  0.000000;
  k_volt_fall_transition :  0.000000;
  k_temp_rise_transition :  0.000000;
  k_temp_fall_transition :  0.000000;

"]

  /* End of header section */


  /* Start of cell  */
  cell ($mod_data(name)) {

  [pop_keep_block_content keep_block_data "keep" "cell-header" ".cpp" {
    area :  1.0;
    dont_touch : true ;
    dont_use : true ;
    timing_model_type : extracted ;
    interface_timing : true ;
    is_macro_cell : true ;

    /*
    pg_pin (VDD){
      voltage_name : VDD;
      direction : input ;
      pg_type : primary_power ;

    }
    pg_pin (VSS ){
      voltage_name : VSS ;
      direction : input ;
      pg_type : primary_ground ;

    }
    pg_pin (VPW){
      voltage_name : VPW;
      direction : input ;

      Note: Some tools wont accept pwell
      pg_type : primary_ground ;
      pg_type : pwell ;
    }
    pg_pin (VNW){
      voltage_name : VNW;
      direction : input ;

      Note: Some tools wont accept nwell
      pg_type : primary_power ;
      pg_type : nwell ;
    }
    */
  }]


%( foreach_array port $mod_data(ports) {
    if { [string is integer $port(size)] } {

        if {$port(size) > 1} {
            echo "
    /* Start of bus $port(name) */
    type (bus_${bus_type_index}) {
        base_type : array;
        data_type : bit;
        bit_width : $port(size);
        bit_from  : [expr { $port(size) - 1 }];
        bit_to    : 0;
        downto    : true;
    }
    bus ($port(name)) {
      bus_type: bus_${bus_type_index};
"
            incr bus_type_index
            for {set i [expr {$port(size) - 1}]} {$i >= 0} {incr i -1} {
                echo "
      pin ($port(name)\[$i\]) {
          direction : $port(direction);
      }
"
            }
            echo "
    }
    /* End of bus $port(name) */
"
        } else {
             echo "
    pin ($port(name)) {
        direction : $port(direction);
    }
"
        }
    } else {
        # TODO automatically check existence and resolve parameter value
        puts "Warning: $port(name) has non-integer size '$port(size)'"
    }
}
%)
  } /* End of cell $mod_data(name) */

} /* End of Library */

#!/usr/bin/env tclsh

#===============================================
# variables/config
#===============================================
namespace eval config {
    variable run_dir "run"
    variable rsc_dir "resources"
    variable tst_dir "tests"
    variable log_dir "log"
    variable log_dir "log"
    variable res_dir "results"
}

namespace eval deploy {
    variable main_dir ""
    variable src_dir ""
    variable trg_dir ""
    variable run_dir ""
    variable logf stderr
    variable resfn {}
    variable result "unchecked"
    variable result_fail false
    variable run_last_out {}
}

#===============================================
# deploy sources
#===============================================
proc deploy {src trg} {
    if {[string index $trg end] eq "/"} {
        set trg [file join $trg $src]
    }
    set trg [file join $deploy::trg_dir $trg]
    set trg_dir [file dirname $trg]

    set src [file join $deploy::src_dir $src]

    file mkdir $trg_dir
    puts $deploy::logf "DEPLOY: ${src} --> ${trg}"
    file copy $src $trg
}

proc deploy_resource {name} {
    set rsc_dir [file join $config::rsc_dir $name]
    set rsc_script [file join $rsc_dir "deploy.tcl"]

    set dpl_src_dir_old $deploy::src_dir
    set deploy::src_dir $rsc_dir

    if {[file exists $rsc_script]} {
        source $rsc_script
    } else {
        error "$rsc_script not found"
    }

    set deploy::src_dir $dpl_src_dir_old
}

#===============================================
# run commands
#===============================================
proc run {args} {
    run_dir_check . true {*}$args
}

proc run_nocheck {args} {
    run_dir_check . false {*}$args
}

proc run_in {dir args} {
    run_dir_check $dir true {*}$args
}

proc run_dir_check {dir check args} {
    set deploy::run_last_out {}

    set d [pwd]
    cd $deploy::run_dir

    puts $deploy::logf "RUN: $args"

    set err false
    if {[catch {
        # prevent make calls in subscripts from trying to access jobserver
        set ::env(MAKEFLAGS) "-j1"
        exec -ignorestderr -- [file join $deploy::main_dir toolwrap] $dir {*}$args 2>@1
    } result]} {
        set err $check
    }
    puts $deploy::logf $result
    set deploy::run_last_out $result

    cd $d

    if {$err} {
        error "ERROR while running '$args'"
    }
}

#===============================================
# evaluate results
#===============================================
proc eval_run_output {cmp_list} {
    if {$deploy::result_fail} {return}
    puts $deploy::logf "EVAL: command output"

    # init
    set match_count [dict create]
    for {set i 0} {$i < [expr {[llength $cmp_list] / 3}]} {incr i} {
        dict set match_count $i 0
    }

    # match
    foreach line [split $deploy::run_last_out "\n"] {
        set i 0
        foreach {type compare count} $cmp_list {
            switch -exact -- $type {
                re {
                    if {[regexp -- $compare $line]} {
                        dict incr match_count $i
                    }
                }
                exact {
                    if {$line eq $compare} {
                        dict incr match_count $i
                    }
                }
                glob {
                    if {[string match $compare $line]} {
                        dict incr match_count $i
                    }
                }
                default {
                    error "unknown comparison type: ${type}"
                }
            }
            incr i
        }
    }

    # check
    set result "passed"

    set i 0
    foreach {type compare count} $cmp_list {
        if {[dict get $match_count $i] != $count} {
            set result "failed"
            set deploy::result "failed"
            set deploy::result_fail true

            puts $deploy::logf "mismatch for '${compare}': expected $count, got [dict get $match_count $i]"
        }

        incr i
    }

    set deploy::result $result
}

proc eval_regression {} {
    if {$deploy::result_fail} {return}
    puts $deploy::logf "EVAL: regression results"

    set regsumf [open [file join $deploy::run_dir regression runs latest summary.log] "r"]
    set regsum [split [read $regsumf] "\n"]
    close $regsumf

    set lastline [lindex $regsum end-1]

    if {[regexp -- {^\s*PASSED:\s*([0-9]+)\s*out\s*of\s*([0-9]+)\s*$} $lastline m_whole n_pass n_total]} {
        if {$n_pass < $n_total} {
            set deploy::result "failed"
            set deploy::result_fail true
        } else {
            set deploy::result "passed"
        }
    } else {
        set deploy::result "evalerror"
        set deploy::result_fail true
    }
}

proc eval_compare_to_golden {local golden {exact false}} {
    if {$deploy::result_fail} {return}

    set flocal  [file join $deploy::trg_dir $local]
    set fgolden [file join $deploy::src_dir $golden]

    puts $deploy::logf "EVAL: compare \"${flocal}\" <-> \"${fgolden}\""

    if {$exact} {
        set opts "-au"
    } else {
        # ignore space/blank lines
        set opts "-auwB"
    }

    if {[catch {
        exec -ignorestderr -- diff $opts $flocal $fgolden >@ $deploy::logf 2>@ $deploy::logf
    } ex]} {
        set deploy::result "failed"
        set deploy::result_fail true
    } else {
        set deploy::result "passed"
    }
}

#===============================================
# main
#===============================================
proc run_test_script {name} {
    set tst_dir [file join $config::tst_dir $name]
    set tst_script [file join $tst_dir "run.tcl"]

    set dpl_src_dir_old $deploy::src_dir
    set deploy::src_dir $tst_dir

    if {[file exists $tst_script]} {
        source $tst_script
    } else {
        error "$tst_script not found"
    }

    set deploy::src_dir $dpl_src_dir_old
}

proc run_test {test {keep false}} {
    set deploy::trg_dir [file join [pwd] $config::run_dir $test]
    set deploy::run_dir [file join [pwd] $config::run_dir $test]
    file mkdir $deploy::run_dir
    set deploy::main_dir [pwd]
    file mkdir $config::log_dir
    set deploy::logf [open [file join [pwd] $config::log_dir ${test}.log] "w"]
    file mkdir $config::res_dir
    set deploy::resfn [file join [pwd] $config::res_dir ${test}.result]

    set resf [open $deploy::resfn "w"]
    puts $resf "TESTSTATUS: unchecked"
    close $resf

    if {[catch {run_test_script $test} ex]} {
        puts $deploy::logf $ex
        set deploy::result "exception"
        set deploy::result_fail true
    }

    set resf [open $deploy::resfn "w"]
    puts $resf "TESTSTATUS: ${deploy::result}"
    puts "${test}: ${deploy::result}"
    close $resf

    close $deploy::logf

    if {!$keep} {
        file delete -force -- $deploy::run_dir
    }
}

proc main {} {
    set opts true
    set keep true
    foreach test $::argv {
        if {$opts} {
            if {$test eq "--"} {
                set opts false
                continue
            } elseif {$test eq "--clean-after"} {
                set keep false
                continue
            }
        }
        run_test $test $keep
    }
}

main
